Things that I learned in workshop 3.

      First, I learnt how to use for and do-while loop by using nested loops concept to get the user’s input and store that input into a variable. By using loops I learned that programmers do not need to ask the user about the values every time, instead that part is executed by the loop, where the loops keeps on running until the condition becomes false and the control comes out of the loop. 
      Second, I learnt what are If Else statements and the “&& ||  <=  >=  >  <  !=  !” relational & logical expressions and how to use them while writing a program. The If Else conditions when used with the relational and logical expressions, helps check the conditions, whether the user entered the correct value or not. If the If statement checks the condition and returns true or 1 then the If block will be executed and if the condition is false then the control will not go inside the If block but it will move on to Else statement and the program executes whatever is written inside the Else block and so on and so forth.

How did pseudo-coding the solution beforehand help with the coding part? If you did not use pseudo code (or prepare some kind of an outlined answer), think about your experience and either justify your method or explain why it may have been better to plan ahead. 

      I did not prepare a pseudo code to solve the workshop 3. However, my approach was to read the whole workshop a couple of times, see what the output is against what is needed to be done throughout the workshop. Once I understood what I had to do in the program, I wrote a rough program on a piece of paper about how the logic and program will flow so that I can get desired output at every step of the program. The rough work helped me understand exactly how this program will work. The most important part for me was the output (how does the output looks like and I compared that to the user’s input) because that helped me understands what type of logic is expected from the professor so that the workshop is successfully completed according to the requirements. 

There are 3 types of iteration constructs. What ones did you use in your program, and why? 

      I used for loop with a nested do-while inside the for loop. The reason why I used a for loop was that NUMS was defined as a constant variable before the program started. So, if I run a for loop, from 1 up till the value of NUMS, the variable “i” in the for loop will give me the number of days every time the loop is running. So I used the variable “i” to take the values of the temperatures of that specific day as the program stored the values into the respective variables and the values got updated every time until the for loop reached the value of NUMS and then it exited. Also, using for loop helped me display on which specific day was the temperature, highest and lowest along with the highest and lowest temperature values throughout the period of 4 days. Furthermore, for loop also helped me store the values of the average high, average low and overall temperatures as the value of variable “i” changed every time the loop executed.
      Besides, inside the for loop I used a do-while loop. The do-while loop was used to check whether the conditions, (1. high > low, 2. high < 41, 3. low > -41) were true or false. If they are true, then increase the value of variable “j” and exit the loop and continue on with the program and if the conditions are false then print the error message and keep asking the values to the user until he/she enters the correct values.

Describe how you tested your solution and what debugging method you applied to find and correct errors? 

      I tested my solution with the values that the workshop provided along with values that were not allowed, for example, high < low, high > 41 and low < -41 to check if my code was checking these conditions properly. Also, as I wrote the code, I faced numerous amounts of errors and I solved these errors by using the debugging tool within the Visual Studio. I put a few breakpoints along my code and then I traced the mismatched values in the debugging mode where I was able to correct my mistakes and update the values so that the code would work as it needed to. Also, I did rough work on a piece of paper to follow my code and how the program is being executed line by line.  
